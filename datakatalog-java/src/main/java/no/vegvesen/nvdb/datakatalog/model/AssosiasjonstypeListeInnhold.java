/*
 * NVDB Datakatalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.nvdb.datakatalog.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import no.vegvesen.nvdb.datakatalog.model.AssosiasjonstypeVegobjekttype;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AssosiasjonstypeListeInnhold
 */
@JsonPropertyOrder({
  AssosiasjonstypeListeInnhold.JSON_PROPERTY_INNENFOR_MOR,
  AssosiasjonstypeListeInnhold.JSON_PROPERTY_RELASJONSTYPE,
  AssosiasjonstypeListeInnhold.JSON_PROPERTY_ID,
  AssosiasjonstypeListeInnhold.JSON_PROPERTY_NAVN,
  AssosiasjonstypeListeInnhold.JSON_PROPERTY_EGENSKAPSTYPE,
  AssosiasjonstypeListeInnhold.JSON_PROPERTY_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-22T10:07:12.572828+01:00[Europe/Oslo]")
public class AssosiasjonstypeListeInnhold {
  /**
   * Gets or Sets innenforMor
   */
  public enum InnenforMorEnum {
    NEI("NEI"),
    
    JA("JA"),
    
    MED_AVVIK("MED_AVVIK");

    private String value;

    InnenforMorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InnenforMorEnum fromValue(String value) {
      for (InnenforMorEnum b : InnenforMorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INNENFOR_MOR = "innenfor_mor";
  private InnenforMorEnum innenforMor;

  /**
   * Gets or Sets relasjonstype
   */
  public enum RelasjonstypeEnum {
    ASSOSIASJON("ASSOSIASJON"),
    
    AGGREGERING("AGGREGERING"),
    
    KOMPOSISJON("KOMPOSISJON"),
    
    TOPOLOGI("TOPOLOGI");

    private String value;

    RelasjonstypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RelasjonstypeEnum fromValue(String value) {
      for (RelasjonstypeEnum b : RelasjonstypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RELASJONSTYPE = "relasjonstype";
  private RelasjonstypeEnum relasjonstype;

  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_NAVN = "navn";
  private String navn;

  public static final String JSON_PROPERTY_EGENSKAPSTYPE = "egenskapstype";
  private String egenskapstype;

  public static final String JSON_PROPERTY_TYPE = "type";
  private AssosiasjonstypeVegobjekttype type;

  public AssosiasjonstypeListeInnhold() {
  }

  public AssosiasjonstypeListeInnhold innenforMor(InnenforMorEnum innenforMor) {
    
    this.innenforMor = innenforMor;
    return this;
  }

   /**
   * Get innenforMor
   * @return innenforMor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNENFOR_MOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InnenforMorEnum getInnenforMor() {
    return innenforMor;
  }


  @JsonProperty(JSON_PROPERTY_INNENFOR_MOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnenforMor(InnenforMorEnum innenforMor) {
    this.innenforMor = innenforMor;
  }


  public AssosiasjonstypeListeInnhold relasjonstype(RelasjonstypeEnum relasjonstype) {
    
    this.relasjonstype = relasjonstype;
    return this;
  }

   /**
   * Get relasjonstype
   * @return relasjonstype
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELASJONSTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RelasjonstypeEnum getRelasjonstype() {
    return relasjonstype;
  }


  @JsonProperty(JSON_PROPERTY_RELASJONSTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelasjonstype(RelasjonstypeEnum relasjonstype) {
    this.relasjonstype = relasjonstype;
  }


  public AssosiasjonstypeListeInnhold id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public AssosiasjonstypeListeInnhold navn(String navn) {
    
    this.navn = navn;
    return this;
  }

   /**
   * Get navn
   * @return navn
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAVN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNavn() {
    return navn;
  }


  @JsonProperty(JSON_PROPERTY_NAVN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNavn(String navn) {
    this.navn = navn;
  }


  public AssosiasjonstypeListeInnhold egenskapstype(String egenskapstype) {
    
    this.egenskapstype = egenskapstype;
    return this;
  }

   /**
   * Get egenskapstype
   * @return egenskapstype
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EGENSKAPSTYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEgenskapstype() {
    return egenskapstype;
  }


  @JsonProperty(JSON_PROPERTY_EGENSKAPSTYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEgenskapstype(String egenskapstype) {
    this.egenskapstype = egenskapstype;
  }


  public AssosiasjonstypeListeInnhold type(AssosiasjonstypeVegobjekttype type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AssosiasjonstypeVegobjekttype getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(AssosiasjonstypeVegobjekttype type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssosiasjonstypeListeInnhold assosiasjonstypeListeInnhold = (AssosiasjonstypeListeInnhold) o;
    return Objects.equals(this.innenforMor, assosiasjonstypeListeInnhold.innenforMor) &&
        Objects.equals(this.relasjonstype, assosiasjonstypeListeInnhold.relasjonstype) &&
        Objects.equals(this.id, assosiasjonstypeListeInnhold.id) &&
        Objects.equals(this.navn, assosiasjonstypeListeInnhold.navn) &&
        Objects.equals(this.egenskapstype, assosiasjonstypeListeInnhold.egenskapstype) &&
        Objects.equals(this.type, assosiasjonstypeListeInnhold.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(innenforMor, relasjonstype, id, navn, egenskapstype, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssosiasjonstypeListeInnhold {\n");
    sb.append("    innenforMor: ").append(toIndentedString(innenforMor)).append("\n");
    sb.append("    relasjonstype: ").append(toIndentedString(relasjonstype)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    navn: ").append(toIndentedString(navn)).append("\n");
    sb.append("    egenskapstype: ").append(toIndentedString(egenskapstype)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

